{"version":3,"sources":["components/pokemon/loading.gif","background.png","components/layout/NavBar.js","components/pokemon/PokemonCard.js","components/pokemon/PokemonList.js","components/layout/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","href","Component","Sprite","styled","img","Card","div","PokemonCard","state","name","imageUrl","pokemonIndex","this","props","url","split","length","setState","imageLoading","toManyRequests","src","spinner","style","width","height","alt","classname","onLoad","onError","display","toLowerCase","map","letter","charAt","toUpperCase","substring","join","PokemonList","pokemon","axios","get","res","data","Fragment","key","Dashboard","App","background","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,8LCGtBC,E,uKAEjB,OACE,6BACE,yBAAKC,UAAU,yDACb,uBAAGA,UAAU,yDAAyDC,KAAK,KAA3E,mB,GAL0BC,a,qiBCGpC,IAAMC,EAASC,IAAOC,IAAV,KAMNC,EAAOF,IAAOG,IAAV,KAYWC,E,4MAEnBC,MAAM,CACJC,KAAM,GACNC,SAAU,GACVC,aAAc,I,kEAII,IAAD,EACGC,KAAKC,MAAlBJ,EADU,EACVA,KAAMK,EADI,EACJA,IACPH,EAAeG,EAAIC,MAAM,KAAKD,EAAIC,MAAM,KAAKC,OAAQ,GACrDN,EAAQ,yEAAqEC,EAArE,iBAEdC,KAAKK,SAAS,CACZR,OACAC,WACAC,eACAO,cAAc,EACdC,gBAAgB,M,+BAKX,IAAD,OAKN,OACE,yBAAKpB,UAAU,0BACb,kBAACM,EAAD,CAAMN,UAAU,QACd,gCACE,wBAAIA,UAAU,eAAgBa,KAAKJ,MAAMG,cACxCC,KAAKJ,MAAMU,aACR,yBAAKE,IAAKC,IAASC,MAAO,CAACC,MAAO,MAAOC,OAAQ,OAASzB,UAAU,4CAA4C0B,IAAI,KACpH,KACJ,kBAACvB,EAAD,CACAwB,UAAU,oCACVN,IAAKR,KAAKJ,MAAME,SAChBiB,OAAQ,kBAAM,EAAKV,SAAS,CAACC,cAAc,KAC3CU,QAAS,kBAAM,EAAKX,SAAS,CAACE,gBAAgB,KAC9CG,MACEV,KAAKJ,MAAMW,eAAiB,CAACU,QAAS,QACtCjB,KAAKJ,MAAMU,aAAe,KAAO,CAACW,QAAS,WAG5CjB,KAAKJ,MAAMW,eAAkB,wBAAIpB,UAAU,WACxC,0BAAMA,UAAU,2BAAhB,qBACQ,KAGhB,yBAAKA,UAAU,qBACd,wBAAIA,UAAU,eAAea,KAAKJ,MAAMC,KAAKqB,cAAcf,MAAM,KAAKgB,KAAI,SAAAC,GAAM,OAAIA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,UAAU,MAAIC,KAAK,c,GArD/GnC,a,iBCpBpBoC,E,4MAEnB7B,MAAQ,CACNM,IAAK,yDACLwB,QAAS,M,kMAKUC,IAAMC,IAAI5B,KAAKJ,MAAMM,K,OAAjC2B,E,OACN7B,KAAKK,SAAS,CAACqB,QAASG,EAAIC,KAAJ,U,qIAIzB,OAEE,kBAAC,IAAMC,SAAP,KACC/B,KAAKJ,MAAM8B,QACV,yBAAKvC,UAAU,OACda,KAAKJ,MAAM8B,QAAQP,KAAI,SAAAO,GAAO,OAC7B,kBAAC,EAAD,CACCM,IAAON,EAAQ7B,KACfA,KAAQ6B,EAAQ7B,KAChBK,IAAOwB,EAAQxB,UAIf,wD,GA3B8Bb,aCDpB4C,E,uKAEjB,OACE,yBAAK9C,UAAU,OACf,yBAAKA,UAAU,OACf,kBAAC,EAAD,Y,GALiCE,a,iBCkBxB6C,G,mLAXb,OACE,yBAAK/C,UAAU,MAAMuB,MAAO,CAACyB,WAAW,OAAD,OAASC,IAAT,OACrC,kBAAC,EAAD,MACA,yBAAKjD,UAAU,aACb,kBAAC,EAAD,Y,GANUE,cCIEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4a5b059c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.3e936af3.gif\";","module.exports = __webpack_public_path__ + \"static/media/background.a67f4350.png\";","import React, { Component } from 'react';\n\n\nexport default class NavBar extends Component {\n  render(){\n    return(\n      <div>\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0 align-itens-center\" href=\"/\"> Pokedex </a>\n        </nav>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nimport spinner from '../pokemon/loading.gif'\n\nconst Sprite = styled.img`\nwidth: 5em;\nheight: 5em;\ndisplay: none;\n`;\n\nconst Card = styled.div`\nbox-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);\ntransition: all 0.3s cubic-bezier(0.25, 0.8, 0.25,1 );\n&&:hover{\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25),0 10px 10px rgba(0,0,0,0.22)\n}\n-moz-user-select: none;\n-website-user-select: none;\nuser-select: none;\n-o-user-select: none;\n`\n\nexport default class PokemonCard extends Component{\n\n  state={\n    name: '',\n    imageUrl: '',\n    pokemonIndex: '',\n\n  }\n\n  componentDidMount(){\n    const {name, url} = this.props\n    const pokemonIndex = url.split(\"/\")[url.split(\"/\").length -2];\n    const imageUrl = `https://github.com/PokeAPI/sprites/blob/master/sprites/pokemon/${pokemonIndex}.png?raw=true`\n   \n    this.setState({\n      name, \n      imageUrl,\n      pokemonIndex,\n      imageLoading: true,\n      toManyRequests: false\n    })\n  \n  }\n\n  render(){\n\n    \n\n\n    return(\n      <div className=\"col-md-3 col-sm-6 mb-5\" >\n        <Card className=\"card\">\n          <center>\n            <h5 className=\"card-header\">{ this.state.pokemonIndex }</h5>\n            {this.state.imageLoading ? (\n                <img src={spinner} style={{width: '5em', height: '5em' }} className=\"card-img-top rounded mx-auto d-block mt-2\" alt=\"\" />\n            ) : null}\n            <Sprite \n            classname=\"card-img-top rounded mx-auto mt-2\" \n            src={this.state.imageUrl}\n            onLoad={() => this.setState({imageLoading: false})}\n            onError={() => this.setState({toManyRequests: true})}\n            style={\n              this.state.toManyRequests ? {display: \"none\"} : \n              this.state.imageLoading ? null : {display: \"block\"}\n            }\n            />\n            {this.state.toManyRequests ? (<h6 className=\"mx-auto\" >\n                <span className=\"badge badge-danger mt-2\" > To Many Request</span>\n               </h6>) : null}\n\n            \n        <div className=\"card-body mx-auto\">\n         <h6 className=\"card-title \">{this.state.name.toLowerCase().split(\" \").map(letter => letter.charAt(0).toUpperCase() + letter.substring(1)).join(' ')}</h6>\n         </div>\n         </center>          \n        </Card>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport PokemonCard from './PokemonCard';\nimport axios from 'axios';\n\nexport default class PokemonList extends Component{\n\n  state = {\n    url: 'https://pokeapi.co/api/v2/pokemon/?limit=350&offset=00',\n    pokemon: null\n  }\n  \n\n   async componentDidMount(){\n     const res = await axios.get(this.state.url);\n     this.setState({pokemon: res.data['results']})\n  }\n\n  render(){\n    return(\n      \n      <React.Fragment>\n      {this.state.pokemon ? (      \n        <div className=\"row\" >\n        {this.state.pokemon.map(pokemon => (\n          <PokemonCard \n           key = {pokemon.name}\n           name = {pokemon.name}\n           url = {pokemon.url}\n          />\n        ))}\n      </div>\n      ) : (<h1>Loading Pokemons...</h1>)}\n      </React.Fragment>\n    )\n  }\n}","import React, { Component } from 'react';\nimport PokemonList from '../pokemon/PokemonList';\n\nexport default class Dashboard extends Component{\n  render(){\n    return(\n      <div className=\"row\" >\n      <div className=\"col\">\n      <PokemonList/>\n      </div>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport NavBar from './components/layout/NavBar';\nimport Dashboard from './components/layout/Dashboard';\n\nimport backgroundImage from './background.png';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n      render() {\n  return (\n    <div className=\"App\" style={{background: `url(${backgroundImage})`}}>\n      <NavBar/> \n      <div className=\"container\">\n        <Dashboard/>\n      </div>\n    </div>\n  );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}